- It consists of key-value pairs. They are not part of an ordering.

- Objects can hold all sorts of data, nums, strings, arrays even other objects...

- An object syntax seems like the following,
  var person = {
    name: "Cindy",
    age: 32,
    city: "KÃ¶ln"
  };

- There are 3 ways of creating an object,
  2. Create'em all at once, just like above,
    var person = {
      name: "Travis",
      age: 22,
      city: "Linz"
    };
  1. Make an empty object then add to it,
    var person = {}
    person.name = "Travis";
    person.age = 22;
    person.city = "Linz";
  3. Make the empty object with a different notation,
    var person = new.Object();
    person.name = "Travis";
    person.age = 22;
    person.city = "Linz";

- Updating the properties,
  person["age"] += 1;
  person.city = "Berlin";

- To retrieve data from objects there are two ways:
  1. person["name"] //bracket notation
  2. person.name //dot notation

- We cannot use dot notation if the property starts with a number,
  someObject.1blah //INVALID
  someObject["1blah"] //VALID

- We cannot use dot notation if the property has spaces in its name,
  someObject.blah blah //INVALID
  someObject["blah blah"] //VALID

- We can lookup using a variable with bracket notation,
  var str = "name";
  someObject.str //doesn't look for "name"
  someObject[str] //does evaluate str and looks for "name"

  - In some languages 'objects' are called as 'dictionaries' thanks to the key-value pairs.

  - Actually arrays are a special type of objects that has the keys only as numbers.

  - To add a new key-value pair to an object,
    person.surname = "Odd";

  - An array of object is like the following,
    var posts = [
      {
        title: "Dogs are awesome",
        author: "Ryan",
        comments: ["Yeah I think so", "Nope!"]
      },
      {
        title: "Cats are awesome",
        author: "Bob",
        comments: ["Not really", "Of course..."]
      }
    ]
    posts[1].comments[0]; //"Not really"
    var myObject = {
      friends: [
        {name: "Ali"},
        {name: "Veli"},
        {name: "Ahmet"}
      ],
      color: "blue",
      isEvil: false
    }
    myObject.friends[0].name; //"Ali"

- We can add functions into the objects as well as properties and when we do it we call these functions as "methods" after this point,
  var obj = {
    name: "Mustafa",
    age: 21,
    isCool: false,
    friends: ["merve", "osman"],
    add: function(x,y){
      return x+y;
    }
  }
  To call methods,
    obj.add(5,4);
  It is just like "console.log()". "console" is an object and "log()" is a method inside of it

- Both to avoid namespace collisions and keeping the code organized we can do sth. like following,
    var dogSpace = {};
    dogSpace.speak = function(){
      return "WOOF!";
    }
    var catSpace = {};
    catSpace.speak = function(){
      return "MEOW!";
    }
    dogSpace.speak(); //"WOOF!"
    catSpace.speak(); //"MEOW!"
  This is used i.e. with delete functions for posts or comments or users in real world. They are both delete functions but refer to the different objects and do slightly different tasks.