Boolean Logic
  - == Equal to
  - === Equal value and type
    ex:
      x = 5
      x == "5" //true
      x === "5" //false
    ex:
      var y = null
      y == undefined //true
      y === undefined //false
  - '==' performs "type coersion". It tries to get them to same format and then compare the value that's why int 5 equals to string 5.
  - It is strongly recommended to use '===' because it is much safer!
  - Following exmaples will give an idea about non-reliablity of '==',
    ex:
      true == "1"   //true
      0 == false   //true
      null == undefined   //true
      NaN == NaN   //false

Logical Operators
  1. && - AND
  2. || - OR
  3. !  - NOT
  - Values that aren't actually true or false, are still inherently 'truthy' or 'falsy' when evaluated in a boolean context,
    !"hello" //false which means string is "truthy"
    !!"hell" //true which also means string is "truthy"
    !!"" //false
    !!null //false
    !!0 //false
    !!NaN //false
    !!-1 //true
  - Falsy values:
    false, 0, "", null, undefined, NaN

- propmt always returns a String! So in order to convert it into number,
    var age = Number(prompt("What is your age?"));

Conditionals
  ex:
    if(age < 18){
      console.log("I'm sorry. You are not old enough to pass!")
    }
    else if(age < 21){
      console.log("All right, pass but my eyes are on you!")
    }
    else {
      console.log("Do whatever you want...")
    }

- typeof myNumber
    Gives us the type of the variable "myNumber"

- DRY: Don't Repeat Yourself (x WET: Write Everything Twice)
    We want to keep our code as DRY as possible.

Loops
  1. while
    ex:
      var count = 1;
      while(count <= 10) {
        console.log("count is: " + count);
        count+=2;
      }
      When we evaluate the example above in chrome console, we will see that it also shows us number 11 which is not expected. But actually it's not printing it out it just shows us that as it is the lastly evaluated value but not printed out because at the last loop of the while count is updated to 11. And to point this out, console just pust a light-reverse-directed arrow to the beginning of the line.
    ex:
      var str = "hello";
      var count = 0;
      while(count < str.length) {
        console.log(str[count]);
        count++;
      }