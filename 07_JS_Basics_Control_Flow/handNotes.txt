Boolean Logic
  - == Equal to
  - === Equal value and type
    ex:
      x = 5
      x == "5" //true
      x === "5" //false
    ex:
      var y = null
      y == undefined //true
      y === undefined //false
  - '==' performs "type coersion". It tries to get them to same format and then compare the value that's why int 5 equals to string 5.
  - It is strongly recommended to use '===' because it is much safer!
  - Following exmaples will give an idea about non-reliablity of '==',
    ex:
      true == "1"   //true
      0 == false   //true
      null == undefined   //true
      NaN == NaN   //false

Logical Operators
  1. && - AND
  2. || - OR
  3. !  - NOT
  - Values that aren't actually true or false, are still inherently 'truthy' or 'falsy' when evaluated in a boolean context,
    !"hello" //false which means string is "truthy"
    !!"hell" //true which also means string is "truthy"
    !!"" //false
    !!null //false
    !!0 //false
    !!NaN //false
    !!-1 //true
  - Falsy values:
    false, 0, "", null, undefined, NaN