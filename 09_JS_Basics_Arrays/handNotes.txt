- Ways of creating an array,
  1. var friends = []; //common
  2. var friends = new Array() //uncommon

- Syntax of an array,
    var friends = ["Emma", "John", "Betty", "Dave"];

- Index numbers in JS starts from 0,
    friends[0]; //"Emma"

- We can directly change an element at an index by reassigning,
    friends[1]; //"John"
    friends[1] = "Johnny";
    friends[1] //"Johnny"

- We can add new data to an array,
    friends[4] = "Julia";
    friends //["Emma", "John", "Betty", "Dave", "Julia"];

- If we add the new data to a further place,
    friends[7] = "Chuck";
  Then JS will fill the indexes between with "undefined",
    friends; //["Emma", "John", "Betty", "Dave", "Julia", undefined, undefined, "Chuck"];

- Arrays can hold different types of data altogether. All individual items doesn't need to be of the same type,
    var mixed = [1, "Anna", true, undefined, 52, "T端rkei", null];

- Length property will give us the length of the array just like strings,
    friends.length //8

Built-in Array Methods (https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array#)
  1. push/pop
    We use 'push' to add item to the end of the array. It also returns the updated length of the array right away, it can be stored in a variable for further use,
      var abc = ["a", "b"];
      var.push("c") //3
      abc //["a", "b", "c"]
    We use 'pop' to remove the last item of the array. It also returns us that last element right away, it can be stored in a variable for further use,
      abc.pop() //"c"
      abc //["a", "b"]
  2. unshift/shift
    They are similar to 'push/pop' pair but just does the same thing at the beginning of the array.
    So we use 'unshift' to add item to the beginning of the array, It also returns us the updated length of the array right away, it can be stored in a variable for further use,
      var nums = [2, 3, 4];
      var.unshift(1) //4
      nums //[1, 2, 3, 4]
    We use 'shift' to remove the first item of the array. It also returns us that first element right away, it can be stored in a variable for further use,
      nums.shift() //1
      nums //[2, 3, 4]
  3. indexOf
    It's used to find the index of the first occurence of an element in an array, it simply returns us that index and if the given element is not found within the array it returns '-1',
      var myFriends = ["Ahmet", "Mehmet", "Hasan", "Ahmet"];
      myFriends.indexOf("Mehmet"); //1
      myFriends.indexOf("Ahmet"); //0 (not 3)
      myFriends.indexOf("Hakan"); //-1
  4. slice 
    It's used to copy portions or all of the array,
      var colors = ["blue", "red", "green", "yellow", "black"];
      var myColors = colors.slice(1,3); //it copies the [1,3) elements, so first index is included but the second is not!
      myColors //["red", "green"]
      var colorsCopy = colors.slice(); //copies all elements
      colorsCopy //["blue", "red", "green", "yellow", "black"];
    PS: The original array is not manipulated, it stays the same
  EX:
    1. var numbers = [11, 22, 33, 44];
       console.log(numbers[numbers.legth]) //prints undefined
    2. var names = [ ["Ali", "Veli"], ["Ahmet", "Mehmet"], ["Hasan", "H端seyin"] ];
       console.log(names[1]) //["Ahmet", "Mehmet"]
       console.log(names[2][0]) //"Hasan"

Note by Lecturer,
  Chrome browser behaves a little strangely when using alert, prompt, or confirm functions. It doesn't display the HTML on the page until after the popup has been closed. This is problematic since our HTML contains instructions for the user to be able to use the app we're building.

  You can avoid this by wrapping your JS code in the following setTimeout function:

    window.setTimeout(function() {
      // put all of your JS code from the lecture here
    }, 500);
    
  This gives the HTML a half second to load before running the JS, which circumvents the issue of the prompt function blocking the HTML from loading right away.

  This is not something you would have to deal with in the real world as prompt, alert, and confirm functions are almost never used and when they are it's typically not on page load.

  You'll also learn jQuery in latter sections which has a cool $('document').ready()  function that you could use in place of the window.setTimeout workaround mentioned above.

Array Iteration
  1. Classical for loop,
    var colors = ["rot", "gr端n", "gelb"];
    for(var i = 0; i < colors.length; i++){
      console.log(colors[i]);
    }
  2. .forEach loop,
    arr.forEach(someFunction)
    ex:
      var colors = ["rot", "gr端n", "gelb"];
      colors.forEach(function(color){
        //color is a placeholder, it can be renamed as wished
        console.log(color);
      });
    Here if we don't give an argument to the anonymous function inside, it will repeat the things inside the function as many times as the number of elements in the array. So in conclusion, that argument hold that specific item in the array in every iteration and gives us the chance to use it as we want. Lastly we can use either a pre-defined function  or an anonymous function.

Note by Lecturer,
  .forEach takes a callback function, that callback function is expected to have at least 1, but up to 3, arguments. This is how .forEach was designed.

  The arguments are in a specific order:
  - The first one represents each element in the array (per loop iteration) that .forEach was called on.
  - The second represents the index of said element.
  - The third represents the array that .forEach was called on (it will be the same for every iteration of the loop).

  ex:
    [1,2,3].forEach(function(el, i, arr) {
      console.log(el, i, arr);
    });

  - Splice method is used to delete a specific item with the given index.
    .splice(index, howManyItemsToDelete)

- Be careful when using .forEach because when we use return inside of it, we just return from the anonymous function not from the .forEach!

- As soon as I call the function with parantheses at the end, then the function is executed, otherwise not.

- To make myForEach function like arr.myForEach, we write,
    Array.prototype.myForEach = function(func) {
      //loop through the array
      for(var i = 0; i < this.length; i++){
        //call func for each item
        func(this[i]);
      }
    }